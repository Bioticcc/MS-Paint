//#include "Buttons.h"


//constructor

Buttons::Buttons(sf::RenderWindow* renderWindow) : window(renderWindow) {
	std::cout << "Buttons created!\n";
	size = 5;
}


void Buttons::pencilButton() {
	// TODO move these. It's bad practice to have top-level using statements.
	using std::cout;

	cout << "DRAWING WITH PENCIL!\n";

	//this should go in the Pencil Tool object eventually
	sf::CircleShape ink(size);
	ink.setFillColor(sf::Color::Black);
	sf::Vector2i cursorPos = sf::Mouse::getPosition(*window);
	ink.setPosition(static_cast<float>(cursorPos.x), static_cast<float>(cursorPos.y));
	inkDots.push_back(ink); // Store the ink object in the vector
}

void Buttons::clearButton() {
	inkDots.clear();
	system("cls");
}

void Buttons::saveButton() {
	// TODO move these. It's bad practice to have top-level using statements.
	using std::cout;

	cout << "taking screenshot";
	/*
	sf::Image screenshot = window->capture();
	screenshot.saveToFile("SavedDrawings/drawing1");
	*/
	sf::Texture screenshotTexture;
	screenshotTexture.create(window->getSize().x, window->getSize().y);
	screenshotTexture.update(*window);
	sf::Image screenshot = screenshotTexture.copyToImage();
	std::time_t now = std::time(nullptr);
	struct tm buf;
	localtime_s(&buf, &now);
	char timestamp[20];
	std::strftime(timestamp, sizeof(timestamp), "%Y%m%d_%H%M%S", &buf);
	std::string filename = "SavedDrawings/drawing_" + std::string(timestamp) + ".png";
	screenshot.saveToFile(filename);
}

void Buttons::pencilButtonR() {
	sf::CircleShape ink(size);
	ink.setFillColor(sf::Color::Red);
	sf::Vector2i cursorPos = sf::Mouse::getPosition(*window);
	ink.setPosition(static_cast<float>(cursorPos.x), static_cast<float>(cursorPos.y));
	inkDots.push_back(ink);
}

void Buttons::increaseSize() {
	size += 5;
}

void Buttons::decreaseSize() {
	if (size > 5) { size -= 5; }

}

void Buttons::buttonConstructor() {
	textureS.loadFromFile("Buttons/select1.png");
	textureP.loadFromFile("Buttons/pencil1.png");
	textureE.loadFromFile("Buttons/eraser.png");
	textureC.loadFromFile("Buttons/clear.png");
	textureSA.loadFromFile("Buttons/save.png");
	texturePR.loadFromFile("Buttons/pencilR.png");
	texturePB.loadFromFile("Buttons/pencilB.png");
	texturePG.loadFromFile("Buttons/pencilG.png");
	texturePLUS.loadFromFile("Buttons/increase.png");
	textureMINUS.loadFromFile("Buttons/decrease.png");


	select = Button(textureS, 16.0f, 13.0f, [this]() { selectButton(); }, 115.0f, 115.0f);
	pencil = Button(textureP, 218.0f, 16.0f, [this]() { pencilButton(); }, 115.0f, 115.0f);
	eraser = Button(textureE, 16.0f, 148.0f, [this]() {eraserButton(); }, 115.0f, 115.0f);
	clear = Button(textureC, 16.0f, 918.0f, [this]() {clearButton(); }, 210.0f, 100.0f);
	save = Button(textureSA, 118.0f, 785.0f, [this]() {saveButton(); }, 210.0f, 100.0f);
	pencilR = Button(texturePR, 218.0f, 150.0f, [this]() {pencilButtonR(); }, 115.0f, 115.0f);
	pencilB = Button(texturePB, 218.0f, 282.0f, [this]() {pencilButtonB(); }, 115.0f, 115.0f);
	pencilG = Button(texturePG, 218.0f, 415.0f, [this]() {pencilButtonG(); }, 115.0f, 115.0f);
	increase = Button(texturePLUS, 14.0f, 280.0f, [this]() {increaseSize(); }, 115.0f, 115.0f);
	decrease = Button(textureMINUS, 14.0f, 414.0f, [this]() {decreaseSize(); }, 115.0f, 115.0f);


	buttonVect.push_back(select);
	buttonVect.push_back(pencil);
	buttonVect.push_back(eraser);
	buttonVect.push_back(clear);
	buttonVect.push_back(save);
	buttonVect.push_back(pencilR);
	buttonVect.push_back(pencilB);
	buttonV

	select = Button(textureS, 16.0f, 13.0f, [this]() { selectButton(); }, 115.0f, 115.0f);
	pencil = Button(textureP, 218.0f, 16.0f, [this]() { pencilButton(); }, 115.0f, 115.0f);
	eraser = Button(textureE, 16.0f, 148.0f, [this]() {eraserButton(); }, 115.0f, 115.0f);
	clear = Button(textureC, 16.0f, 918.0f, [this]() {clearButton(); }, 210.0f, 100.0f);
	save = Button(textureSA, 118.0f, 785.0f, [this]() {saveButton(); }, 210.0f, 100.0f);
	pencilR = Button(texturePR, 218.0f, 150.0f, [this]() {pencilButtonR(); }, 115.0f, 115.0f);
	pencilB = Button(texturePB, 218.0f, 282.0f, [this]() {pencilButtonB(); }, 115.0f, 115.0f);
	pencilG = Button(texturePG, 218.0f, 415.0f, [this]() {pencilButtonG(); }, 115.0f, 115.0f);
	increase = Button(texturePLUS, 14.0f, 280.0f, [this]() {increaseSize(); }, 115.0f, 115.0f);
	decrease = Button(textureMINUS, 14.0f, 414.0f, [this]() {decreaseSize(); }, 115.0f, 115.0f);


	buttonVect.push_back(select);
	buttonVect.push_back(pencil);
	buttonVect.push_back(eraser);
	buttonVect.push_back(clear);
	buttonVect.push_back(save);
	buttonVect.push_back(pencilR);
	buttonVect.push_back(pencilB);
	buttonVect.push_back(pencilG);
	buttonVect.push_back(increase);
	buttonVect.push_back(decrease);

	std::cout << "Number of buttons: " << buttonVect.size() << "\n";

	for (auto& button : buttonVect) {
		std::cout << "Button at: (" << button.getPosX() << ", " << button.getPosY() << ")\n";
	}
}